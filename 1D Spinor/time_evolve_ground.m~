function phi_up = time_evolve_ground(phi, potential, Deltat, X, Nx, deltax,deltaf,L,c0,c2,k_scale)

density = sq(phi);
tot_density = sum(density);
pot = potential(X);
nonlin_pot = zeros(Nx);
nonlin_pot(1,:) = c0.*tot_density;




diag_pot = -Deltat.*(pot + nonlin_pot);

exp_pot = exp(diag_pot);

phi_up = exp_pot.*phi;
%phi_up = phi_up/norm1d(phi_up, Nx, DeltaX);
if(mod(Nx,2) ~= 0)
    lin_n =  (0:1:Nx-1) - (Nx-1)/2;
else
    N = Nx + 1;
    lin_n = (0:1:N-1) - (N-1)/2;
    lin_n = lin_n(1:Nx);
end
dispersion = -(2*pi/L*lin_n).^2 *Deltat/2;
evol = exp(dispersion);


fourier_phi = fourier_transform(phi_up,Nx,deltax);
%fourier_phi = fourier_phi./norm1d(fourier_phi,Nx,DeltaX);
fourier_phi_evo = evol.*fourier_phi;

phi_up = inverse_ft(fourier_phi_evo,Nx,deltaf);

phi_up = phi_up/norm1d(phi_up, Nx, deltax);

CA = -0*exp(-1i*2*k_scale*X) + c2*phi_up(2,:).*conj(phi_up(3,:));%coupling between 1 and 0
CC = -0*exp(-1i*2*k_scale*X) + c2*phi_up(1,:).*conj(phi_up(2,:));%coupling between -1 and 0

MatV = -CC./((sqrt(1+sq(CC)./sq(CA))).*conj(CA));
MatV(2,:) = zeros(1,Nx);
MatV(3,:) = 1./sqrt(1 + sq(CC)./sq(CA));
MatV(1,:,2) = CA./(sqrt(2*(sq(CA) + sq(CC))./sq(CC)).*conj(CC));
MatV(2,:,2) = -sqrt(sq(CC))./(sqrt(2).*conj(CC));
MatV(3,:,2) = sqrt(sq(CC))./sqrt(2.*(sq(CA)+sq(CC)));
MatV(1,:,3) = CA./(sqrt(2*(sq(CA) + sq(CC))./sq(CC)).*conj(CC));
MatV(2,:,3) = sqrt(sq(CC))./(sqrt(2).*conj(CC));
MatV(3,:,3) = sqrt(sq(CC))./sqrt(2.*(sq(CA)+sq(CC)));

MatV = permute(MatV,[1,3,2]);
MatB = permute(MatV,[2,1,3]);
MatB = conj(MatB);

eigens = zeros(3,Nx);
eigens(1,:) = zeros(1,Nx);
eigens(2,:) = -sqrt(sq(CA) + sq(CC));
eigens(3,:) = sqrt(sq(CA) + sq(CC));

for i = 1:Nx
    phi_up(:,i) = MatV(:,:,i)*(exp(-eigens(:,i).*Deltat).*(MatB(:,:,i)*phi_up(:,i)));
end
phi_up = phi_up/norm1d(phi_up, Nx, deltax);

end